package io.objects.tl.api;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLBytes;
import io.objects.tl.core.TLVector;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLDecryptedMessageMediaDocument extends TLAbsDecryptedMessageMedia {
    public static final int CONSTRUCTOR_ID = 0x7afe8ae2;

    protected TLBytes thumb;

    protected int thumbW;

    protected int thumbH;

    protected String mimeType;

    protected int size;

    protected TLBytes key;

    protected TLBytes iv;

    protected TLVector<TLAbsDocumentAttribute> attributes;

    protected String caption;

    private final String _constructor = "decryptedMessageMediaDocument#7afe8ae2";

    public TLDecryptedMessageMediaDocument() {
    }

    public TLDecryptedMessageMediaDocument(TLBytes thumb, int thumbW, int thumbH, String mimeType,
            int size, TLBytes key, TLBytes iv, TLVector<TLAbsDocumentAttribute> attributes,
            String caption) {
        this.thumb = thumb;
        this.thumbW = thumbW;
        this.thumbH = thumbH;
        this.mimeType = mimeType;
        this.size = size;
        this.key = key;
        this.iv = iv;
        this.attributes = attributes;
        this.caption = caption;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLBytes(thumb, stream);
        writeInt(thumbW, stream);
        writeInt(thumbH, stream);
        writeString(mimeType, stream);
        writeInt(size, stream);
        writeTLBytes(key, stream);
        writeTLBytes(iv, stream);
        writeTLVector(attributes, stream);
        writeString(caption, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        thumb = readTLBytes(stream, context);
        thumbW = readInt(stream);
        thumbH = readInt(stream);
        mimeType = readTLString(stream);
        size = readInt(stream);
        key = readTLBytes(stream, context);
        iv = readTLBytes(stream, context);
        attributes = readTLVector(stream, context);
        caption = readTLString(stream);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += computeTLBytesSerializedSize(thumb);
        size += SIZE_INT32;
        size += SIZE_INT32;
        size += computeTLStringSerializedSize(mimeType);
        size += SIZE_INT32;
        size += computeTLBytesSerializedSize(key);
        size += computeTLBytesSerializedSize(iv);
        size += attributes.computeSerializedSize();
        size += computeTLStringSerializedSize(caption);
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public TLBytes getThumb() {
        return thumb;
    }

    public void setThumb(TLBytes thumb) {
        this.thumb = thumb;
    }

    public int getThumbW() {
        return thumbW;
    }

    public void setThumbW(int thumbW) {
        this.thumbW = thumbW;
    }

    public int getThumbH() {
        return thumbH;
    }

    public void setThumbH(int thumbH) {
        this.thumbH = thumbH;
    }

    public String getMimeType() {
        return mimeType;
    }

    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }

    public TLBytes getKey() {
        return key;
    }

    public void setKey(TLBytes key) {
        this.key = key;
    }

    public TLBytes getIv() {
        return iv;
    }

    public void setIv(TLBytes iv) {
        this.iv = iv;
    }

    public TLVector<TLAbsDocumentAttribute> getAttributes() {
        return attributes;
    }

    public void setAttributes(TLVector<TLAbsDocumentAttribute> attributes) {
        this.attributes = attributes;
    }

    public String getCaption() {
        return caption;
    }

    public void setCaption(String caption) {
        this.caption = caption;
    }
}
