package io.objects.tl.api;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLVector;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.SIZE_CONSTRUCTOR_ID;
import static io.objects.tl.TLObjectUtils.SIZE_INT32;

/**
 * This class is generated by Abolfazl Rezvan.
 */
public class TLPeerUpdateUser extends TLAbsPeerUpdate {
    public static final int CONSTRUCTOR_ID = 0x83179fc8;
    private final String _constructor = "userUpdate#83179fc8";
    protected int usrId;
    protected TLVector<TLSessionId> exceptSessions;

    public TLPeerUpdateUser() {
    }

    public TLPeerUpdateUser(TLAbsUpdates updates, int usrId, TLVector<TLSessionId> exceptSessions) {
        this.updates = updates;
        this.usrId = usrId;
        this.exceptSessions = exceptSessions;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLObject(updates, stream);
        writeInt(usrId, stream);
        writeTLVector(exceptSessions, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        updates = readTLObject(stream, context, TLAbsUpdates.class, -1);
        usrId = readInt(stream);
        exceptSessions = readTLVector(stream, context);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += updates.computeSerializedSize();
        size += SIZE_INT32;
        size += exceptSessions.computeSerializedSize();

        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public int getUsrId() {
        return usrId;
    }

    public void setUsrId(int usrId) {
        this.usrId = usrId;
    }

    public TLVector<TLSessionId> getExceptSessions() {
        return exceptSessions;
    }

    public void setExceptSessions(TLVector<TLSessionId> exceptSessions) {
        this.exceptSessions = exceptSessions;
    }
}
