package io.objects.tl.api.request;

import io.objects.tl.TLContext;
import io.objects.tl.api.*;
import io.objects.tl.api.photos.TLPhoto;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLObject;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.SIZE_CONSTRUCTOR_ID;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLRequestPhotosUploadProfilePhotoVios extends TLMethod<TLPhoto> {
    public static final int CONSTRUCTOR_ID = 0xd50f9c88;

    private final String _constructor = "photos.uploadProfilePhotoVios#d50f9c88";

    protected TLAbsInputFile file;

    protected String caption;

    protected TLAbsInputGeoPoint geoPoint;

    protected TLAbsInputPhotoCrop crop;

    public TLRequestPhotosUploadProfilePhotoVios() {
    }

    public TLRequestPhotosUploadProfilePhotoVios(TLAbsInputFile file) {
        this.file = file;
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public TLPhoto deserializeResponse(InputStream stream, TLContext context) throws IOException {
        final TLObject response = readTLObject(stream, context);
        if (response == null) {
            throw new IOException("Unable to parse response");
        }
        if (!(response instanceof TLPhoto)) {
            throw new IOException("Incorrect response type, expected " + getClass().getCanonicalName() + ", found " + response.getClass().getCanonicalName());
        }
        return (TLPhoto) response;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLObject(file, stream);
        writeString(caption, stream);
        writeTLObject(geoPoint, stream);
        writeTLObject(crop, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        file = readTLObject(stream, context, TLAbsInputFile.class, -1);
        caption = readTLString(stream);
        geoPoint = readTLObject(stream, context, TLAbsInputGeoPoint.class, -1);
        crop = readTLObject(stream, context, TLAbsInputPhotoCrop.class, -1);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += file.computeSerializedSize();
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public TLAbsInputFile getFile() {
        return file;
    }

    public void setFile(TLAbsInputFile file) {
        this.file = file;
    }

    public String getCaption() {
        return caption;
    }

    public void setCaption(String caption) {
        this.caption = caption;
    }

    public TLAbsInputGeoPoint getGeoPoint() {
        return geoPoint;
    }

    public void setGeoPoint(TLInputGeoPoint geoPoint) {
        this.geoPoint = geoPoint;
    }

    public TLAbsInputPhotoCrop getCrop() {
        return crop;
    }

    public void setCrop(TLInputPhotoCrop crop) {
        this.crop = crop;
    }
}
