package io.objects.tl.api.request;

import io.objects.tl.TLContext;
import io.objects.tl.api.help.TLInviteText;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLObject;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLRequestHelpGetInviteTextVios extends TLMethod<TLInviteText> {
    public static final int CONSTRUCTOR_ID = 0xa4a95186;

    protected String langCode;

    private final String _constructor = "help.getInviteTextVios#a4a95186";

    public TLRequestHelpGetInviteTextVios() {
    }

    public TLRequestHelpGetInviteTextVios(String langCode) {
        this.langCode = langCode;
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public TLInviteText deserializeResponse(InputStream stream, TLContext context) throws
            IOException {
        final TLObject response = readTLObject(stream, context);
        if (response == null) {
            throw new IOException("Unable to parse response");
        }
        if (!(response instanceof TLInviteText)) {
            throw new IOException("Incorrect response type, expected " + getClass().getCanonicalName() + ", found " + response.getClass().getCanonicalName());
        }
        return (TLInviteText) response;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeString(langCode, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        langCode = readTLString(stream);
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public String getLangCode() {
        return langCode;
    }

    public void setLangCode(String langCode) {
        this.langCode = langCode;
    }
}
