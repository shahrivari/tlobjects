package io.objects.tl.api.request;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.api.TLAbsInputUser;
import io.objects.tl.api.TLInputStickerSetItem;
import io.objects.tl.api.monobot.TLBotStickerSet;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLObject;
import io.objects.tl.core.TLVector;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLRequestMonobotCreateStickerSet extends TLMethod<TLBotStickerSet> {
    public static final int CONSTRUCTOR_ID = 0x8f69e7da;

    protected int flags;

    protected boolean masks;

    protected TLAbsInputUser userId;

    protected String title;

    protected String shortName;

    protected TLVector<TLInputStickerSetItem> stickers;

    protected long requestId;

    protected int botId;

    private final String _constructor = "monobot.createStickerSet#8f69e7da";

    public TLRequestMonobotCreateStickerSet() {
    }

    public TLRequestMonobotCreateStickerSet(boolean masks, TLAbsInputUser userId, String title,
            String shortName, TLVector<TLInputStickerSetItem> stickers, long requestId, int botId) {
        this.masks = masks;
        this.userId = userId;
        this.title = title;
        this.shortName = shortName;
        this.stickers = stickers;
        this.requestId = requestId;
        this.botId = botId;
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public TLBotStickerSet deserializeResponse(InputStream stream, TLContext context) throws
            IOException {
        final TLObject response = readTLObject(stream, context);
        if (response == null) {
            throw new IOException("Unable to parse response");
        }
        if (!(response instanceof TLBotStickerSet)) {
            throw new IOException("Incorrect response type, expected " + getClass().getCanonicalName() + ", found " + response.getClass().getCanonicalName());
        }
        return (TLBotStickerSet) response;
    }

    private void computeFlags() {
        flags = 0;
        flags = masks ? (flags | 1) : (flags & ~1);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();

        writeInt(flags, stream);
        writeTLObject(userId, stream);
        writeString(title, stream);
        writeString(shortName, stream);
        writeTLVector(stickers, stream);
        writeLong(requestId, stream);
        writeInt(botId, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        masks = (flags & 1) != 0;
        userId = readTLObject(stream, context, TLAbsInputUser.class, -1);
        title = readTLString(stream);
        shortName = readTLString(stream);
        stickers = readTLVector(stream, context);
        requestId = readLong(stream);
        botId = readInt(stream);
    }

    @Override
    public int computeSerializedSize() {
        computeFlags();

        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_INT32;
        size += userId.computeSerializedSize();
        size += computeTLStringSerializedSize(title);
        size += computeTLStringSerializedSize(shortName);
        size += stickers.computeSerializedSize();
        size += SIZE_INT64;
        size += SIZE_INT32;
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public boolean getMasks() {
        return masks;
    }

    public void setMasks(boolean masks) {
        this.masks = masks;
    }

    public TLAbsInputUser getUserId() {
        return userId;
    }

    public void setUserId(TLAbsInputUser userId) {
        this.userId = userId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getShortName() {
        return shortName;
    }

    public void setShortName(String shortName) {
        this.shortName = shortName;
    }

    public TLVector<TLInputStickerSetItem> getStickers() {
        return stickers;
    }

    public void setStickers(TLVector<TLInputStickerSetItem> stickers) {
        this.stickers = stickers;
    }

    public long getRequestId() {
        return requestId;
    }

    public void setRequestId(long requestId) {
        this.requestId = requestId;
    }

    public int getBotId() {
        return botId;
    }

    public void setBotId(int botId) {
        this.botId = botId;
    }
}
