package io.objects.tl.api.request;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.api.TLAbsLangPackString;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLStringVector;
import io.objects.tl.core.TLVector;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLRequestLangpackGetStringsV71 extends TLMethod<TLVector<TLAbsLangPackString>> {
    public static final int CONSTRUCTOR_ID = 0x2e1ee318;

    protected String langCode;

    protected TLStringVector keys;

    private final String _constructor = "langpack.getStringsV71#2e1ee318";

    public TLRequestLangpackGetStringsV71() {
    }

    public TLRequestLangpackGetStringsV71(String langCode, TLStringVector keys) {
        this.langCode = langCode;
        this.keys = keys;
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public TLVector<TLAbsLangPackString> deserializeResponse(InputStream stream, TLContext context)
            throws IOException {
        return readTLVector(stream, context);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeString(langCode, stream);
        writeTLVector(keys, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        langCode = readTLString(stream);
        keys = readTLStringVector(stream, context);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += computeTLStringSerializedSize(langCode);
        size += keys.computeSerializedSize();
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public String getLangCode() {
        return langCode;
    }

    public void setLangCode(String langCode) {
        this.langCode = langCode;
    }

    public TLStringVector getKeys() {
        return keys;
    }

    public void setKeys(TLStringVector keys) {
        this.keys = keys;
    }
}
