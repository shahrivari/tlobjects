package io.objects.tl.api.request;


import io.objects.tl.TLContext;
import io.objects.tl.core.TLMethod;
import io.objects.tl.core.TLObject;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLCodeSettingsVtd extends TLMethod<TLObject> {
    public static final int CONSTRUCTOR_ID = 0x302f59f3;

    protected int flags;

    protected boolean allowFlashcall;

    protected boolean currentNumber;

    protected boolean appHashPresident;

    protected String appHash;

    private final String _constructor = "auth.codeSettings#302f59f3";

    public TLCodeSettingsVtd() {
    }

    public TLCodeSettingsVtd(boolean allowFlashcall, boolean currentNumber, boolean appHashPresident, String appHash) {
        this.allowFlashcall = allowFlashcall;
        this.currentNumber = currentNumber;
        this.appHash = appHash;
        this.appHashPresident = appHashPresident;
    }

    @Override
    public TLObject deserializeResponse(InputStream stream, TLContext context) throws IOException {
        return null;
    }

    private void computeFlags() {
        flags = 0;
        flags = currentNumber ? (flags | 2) : (flags & ~2);
        flags = allowFlashcall ? (flags | 1) : (flags & ~1);
        flags = appHashPresident ? (flags | 4) : (flags & ~4);
        flags = appHash != null ? (flags | 8) : (flags & ~8);
    }


    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();
        writeInt(flags, stream);
        writeString(appHash, stream);

    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        allowFlashcall = (flags & 1) != 0;
        currentNumber = (flags & 2) != 0;
        appHashPresident = (flags & 4) != 0;
        appHash = (flags & 8) != 0 ? readTLString(stream) : "";
    }

    @Override
    public int computeSerializedSize() {
        computeFlags();

        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_INT32;
        if ((flags & 1) != 0) {
            size += SIZE_BOOLEAN;
        }
        if ((flags & 2) != 0) {
            size += SIZE_BOOLEAN;
        }
        if ((flags & 4) != 0) {
            size += SIZE_BOOLEAN;
        }
        if ((flags & 8) != 0) {
            size += computeTLStringSerializedSize(appHash);
        }
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public boolean getAllowFlashcall() {
        return allowFlashcall;
    }

    public boolean getCurrentNumber() {
        return currentNumber;
    }

    public boolean isAllowFlashcall() {
        return allowFlashcall;
    }

    public void setAllowFlashcall(boolean allowFlashcall) {
        this.allowFlashcall = allowFlashcall;
    }

    public boolean isCurrentNumber() {
        return currentNumber;
    }

    public void setCurrentNumber(boolean currentNumber) {
        this.currentNumber = currentNumber;
    }

    public boolean isAppHashPresident() {
        return appHashPresident;
    }

    public void setAppHashPresident(boolean appHashPresident) {
        this.appHashPresident = appHashPresident;
    }

    public String getAppHash() {
        return appHash;
    }

    public void setAppHash(String appHash) {
        this.appHash = appHash;
    }
}
