package io.objects.tl.api;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLVector;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLChatFullVtd extends TLAbsChatFull {
    public static final int CONSTRUCTOR_ID = 0x22a235da;

    protected TLAbsChatParticipants participants;

    protected int flags;

    protected String about;

    protected Integer pinnedMessageId;

    protected Boolean canSetUserName;

    private final String _constructor = "chatFullVtd#22a235da";

    public TLChatFullVtd() {
    }

    public TLChatFullVtd(int id, TLAbsChatParticipants participants, TLAbsPhoto chatPhoto,
                         TLPeerNotifySettings notifySettings, TLAbsExportedChatInvite exportedInvite,
                         TLVector<TLBotInfo> botInfo) {
        this.id = id;
        this.participants = participants;
        this.chatPhoto = chatPhoto;
        this.notifySettings = notifySettings;
        this.exportedInvite = exportedInvite;
        this.botInfo = botInfo;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();

        writeInt(flags, stream);
        writeInt(id, stream);
        writeString(about, stream);
        writeTLObject(participants, stream);
        if ((flags & 2) != 0) {
            if (chatPhoto == null) throwNullFieldException("chatPhoto", flags);
            writeTLObject(chatPhoto, stream);
        }
        writeTLObject(notifySettings, stream);
        writeTLObject(exportedInvite, stream);
        if ((flags & 4) != 0) {
            if (botInfo == null) throwNullFieldException("botInfo", flags);
            writeTLVector(botInfo, stream);
        }
        if ((flags & 32) != 0) {
            if (pinnedMessageId == null) throwNullFieldException("pinnedMessageId", flags);
            writeInt(pinnedMessageId, stream);
        }
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        canSetUserName = (flags & 64) != 0;
        id = readInt(stream);
        participants = readTLObject(stream, context, TLAbsChatParticipants.class, -1);
        chatPhoto = (flags & 2) != 0 ? readTLObject(stream, context, TLAbsPhoto.class, -1) : null;
        notifySettings = readTLObject(stream, context, TLPeerNotifySettings.class, TLPeerNotifySettings.CONSTRUCTOR_ID);
        exportedInvite = readTLObject(stream, context, TLAbsExportedChatInvite.class, -1);
        botInfo = (flags & 4) != 0 ? readTLVector(stream, context) : null;
        pinnedMessageId = (flags & 32) != 0 ? readInt(stream) : null;
    }

    private void computeFlags() {
        flags = 0;
        flags = canSetUserName ? (flags | 64) : (flags & ~64);
        flags = chatPhoto != null ? (flags | 2) : (flags & ~2);
        flags = botInfo != null ? (flags | 4) : (flags & ~4);
        flags = pinnedMessageId != null ? (flags | 32) : (flags & ~32);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_INT32;
        if ((flags & 4) != 0) {
            if (pinnedMessageId == null) throwNullFieldException("pinnedMessageId", flags);
            size += SIZE_INT32;
        }
        size += participants.computeSerializedSize();
        if ((flags & 2) != 0) {
            if (chatPhoto == null) throwNullFieldException("chatPhoto", flags);
            size += chatPhoto.computeSerializedSize();
        }
        size += notifySettings.computeSerializedSize();
        size += exportedInvite.computeSerializedSize();
        if ((flags & 4) != 0) {
            if (botInfo == null) throwNullFieldException("botInfo", flags);
            size += botInfo.computeSerializedSize();
        }
        size += computeTLStringSerializedSize(about);
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public TLAbsChatParticipants getParticipants() {
        return participants;
    }

    public void setParticipants(TLAbsChatParticipants participants) {
        this.participants = participants;
    }

    public TLAbsPhoto getChatPhoto() {
        return chatPhoto;
    }

    public void setChatPhoto(TLAbsPhoto chatPhoto) {
        this.chatPhoto = chatPhoto;
    }

    public TLPeerNotifySettings getNotifySettings() {
        return notifySettings;
    }

    public void setNotifySettings(TLPeerNotifySettings notifySettings) {
        this.notifySettings = notifySettings;
    }

    public TLAbsExportedChatInvite getExportedInvite() {
        return exportedInvite;
    }

    public void setExportedInvite(TLAbsExportedChatInvite exportedInvite) {
        this.exportedInvite = exportedInvite;
    }

    public TLVector<TLBotInfo> getBotInfo() {
        return botInfo;
    }

    public void setBotInfo(TLVector<TLBotInfo> botInfo) {
        this.botInfo = botInfo;
    }

    public String getAbout() {
        return about;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public int getPinnedMessageId() {
        return pinnedMessageId;
    }

    public void setPinnedMessageId(int pinnedMessageId) {
        this.pinnedMessageId = pinnedMessageId;
    }
}
