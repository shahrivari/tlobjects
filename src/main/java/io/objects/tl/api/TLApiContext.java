package io.objects.tl.api;

import io.github.classgraph.ClassGraph;
import io.github.classgraph.ClassInfo;
import io.github.classgraph.ScanResult;
import io.objects.tl.TLContext;
import io.objects.tl.core.TLBool;
import io.objects.tl.core.TLObject;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;

/**
 * This class is generated by Mono's TL class generator
 */
@SuppressWarnings("unused")
public class TLApiContext extends TLContext {
    private static TLApiContext instance;

    public TLApiContext() {
        super(665);
    }

    public static TLApiContext getInstance() {
        if (instance == null) {
            instance = new TLApiContext();
        }
        return instance;
    }

    @Override
    public void init() {
        String pkg = "io.objects.tl";
        try (ScanResult scanResult = new ClassGraph()
                .verbose()
                .enableAllInfo()
                .whitelistPackages(pkg)
                .scan()) {

            for (ClassInfo info : scanResult.getSubclasses("io.objects.tl.core.TLObject")) {
                Class<? extends TLObject> tlClass = (Class<? extends TLObject>) info.loadClass();

                if (Modifier.isAbstract(tlClass.getModifiers()) || TLBool.class.isAssignableFrom(tlClass))
                    continue;

                Object object;
                try {
                    object = tlClass.getConstructor().newInstance();
                    Integer constructorId = (Integer) tlClass.getMethod("getConstructorId").invoke(object);
                    registerClass(constructorId, tlClass);
                } catch (InstantiationException
                        | IllegalAccessException
                        | InvocationTargetException
                        | NoSuchMethodException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
