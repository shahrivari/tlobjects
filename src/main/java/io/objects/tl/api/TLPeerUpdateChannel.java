package io.objects.tl.api;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLIntVector;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.SIZE_CONSTRUCTOR_ID;
import static io.objects.tl.TLObjectUtils.SIZE_INT32;

/**
 * This class is generated by Abolfazl Rezvan.
 */
public class TLPeerUpdateChannel extends TLAbsPeerUpdate {
    public static final int CONSTRUCTOR_ID = 0x83921fc8;
    private final String _constructor = "channelUpdate#83921fc8";
    protected int channelId;
    protected TLIntVector peers;
    protected TLIntVector peersToExcept;
    protected TLIntVector deltaEncodedParticipants;

    public TLPeerUpdateChannel() {
    }

    public TLPeerUpdateChannel(TLAbsUpdates updates, int channelId, TLIntVector peers, TLIntVector peersToExcept, TLIntVector deltaEncodedParticipants) {
        this.updates = updates;
        this.channelId = channelId;
        this.peers = peers;
        this.peersToExcept = peersToExcept;
        this.deltaEncodedParticipants = deltaEncodedParticipants;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLObject(updates, stream);
        writeInt(channelId, stream);
        writeTLVector(peers, stream);
        writeTLVector(peersToExcept, stream);
        writeTLVector(deltaEncodedParticipants, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        updates = readTLObject(stream, context, TLAbsUpdates.class, -1);
        channelId = readInt(stream);
        peers = readTLIntVector(stream, context);
        peersToExcept = readTLIntVector(stream, context);
        deltaEncodedParticipants = readTLIntVector(stream, context);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += updates.computeSerializedSize();
        size += SIZE_INT32;
        size += peers.computeSerializedSize();
        size += peersToExcept.computeSerializedSize();
        size += deltaEncodedParticipants.computeSerializedSize();

        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public int getChannelId() {
        return channelId;
    }

    public void setChannelId(int channelId) {
        this.channelId = channelId;
    }

    public TLIntVector getPeers() {
        return peers;
    }

    public void setPeers(TLIntVector peers) {
        this.peers = peers;
    }

    public TLIntVector getPeersToExcept() {
        return peersToExcept;
    }

    public void setPeersToExcept(TLIntVector peersToExcept) {
        this.peersToExcept = peersToExcept;
    }

    public TLIntVector getDeltaEncodedParticipants() {
        return deltaEncodedParticipants;
    }

    public void setDeltaEncodedParticipants(TLIntVector deltaEncodedParticipants) {
        this.deltaEncodedParticipants = deltaEncodedParticipants;
    }
}
