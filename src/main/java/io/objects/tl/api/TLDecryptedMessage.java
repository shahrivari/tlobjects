package io.objects.tl.api;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLVector;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLDecryptedMessage extends TLAbsDecryptedMessage {
    public static final int CONSTRUCTOR_ID = 0x91cc4674;

    protected int flags;

    protected int ttl;

    protected String message;

    protected TLAbsDecryptedMessageMedia media;

    protected TLVector<TLAbsMessageEntity> entities;

    protected String viaBotName;

    protected Long replyToRandomId;

    protected Long groupedId;

    private final String _constructor = "decryptedMessage#91cc4674";

    public TLDecryptedMessage() {
    }

    public TLDecryptedMessage(long randomId, int ttl, String message,
            TLAbsDecryptedMessageMedia media, TLVector<TLAbsMessageEntity> entities,
            String viaBotName, Long replyToRandomId, Long groupedId) {
        this.randomId = randomId;
        this.ttl = ttl;
        this.message = message;
        this.media = media;
        this.entities = entities;
        this.viaBotName = viaBotName;
        this.replyToRandomId = replyToRandomId;
        this.groupedId = groupedId;
    }

    private void computeFlags() {
        flags = 0;
        flags = media != null ? (flags | 512) : (flags & ~512);
        flags = entities != null ? (flags | 128) : (flags & ~128);
        flags = viaBotName != null ? (flags | 2048) : (flags & ~2048);
        flags = replyToRandomId != null ? (flags | 8) : (flags & ~8);
        flags = groupedId != null ? (flags | 131072) : (flags & ~131072);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();

        writeInt(flags, stream);
        writeLong(randomId, stream);
        writeInt(ttl, stream);
        writeString(message, stream);
        if ((flags & 512) != 0) {
            if (media == null) throwNullFieldException("media", flags);
            writeTLObject(media, stream);
        }
        if ((flags & 128) != 0) {
            if (entities == null) throwNullFieldException("entities", flags);
            writeTLVector(entities, stream);
        }
        if ((flags & 2048) != 0) {
            if (viaBotName == null) throwNullFieldException("viaBotName", flags);
            writeString(viaBotName, stream);
        }
        if ((flags & 8) != 0) {
            if (replyToRandomId == null) throwNullFieldException("replyToRandomId", flags);
            writeLong(replyToRandomId, stream);
        }
        if ((flags & 131072) != 0) {
            if (groupedId == null) throwNullFieldException("groupedId", flags);
            writeLong(groupedId, stream);
        }
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        randomId = readLong(stream);
        ttl = readInt(stream);
        message = readTLString(stream);
        media = (flags & 512) != 0 ? readTLObject(stream, context, TLAbsDecryptedMessageMedia.class, -1) : null;
        entities = (flags & 128) != 0 ? readTLVector(stream, context) : null;
        viaBotName = (flags & 2048) != 0 ? readTLString(stream) : null;
        replyToRandomId = (flags & 8) != 0 ? readLong(stream) : null;
        groupedId = (flags & 131072) != 0 ? readLong(stream) : null;
    }

    @Override
    public int computeSerializedSize() {
        computeFlags();

        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_INT32;
        size += SIZE_INT64;
        size += SIZE_INT32;
        size += computeTLStringSerializedSize(message);
        if ((flags & 512) != 0) {
            if (media == null) throwNullFieldException("media", flags);
            size += media.computeSerializedSize();
        }
        if ((flags & 128) != 0) {
            if (entities == null) throwNullFieldException("entities", flags);
            size += entities.computeSerializedSize();
        }
        if ((flags & 2048) != 0) {
            if (viaBotName == null) throwNullFieldException("viaBotName", flags);
            size += computeTLStringSerializedSize(viaBotName);
        }
        if ((flags & 8) != 0) {
            if (replyToRandomId == null) throwNullFieldException("replyToRandomId", flags);
            size += SIZE_INT64;
        }
        if ((flags & 131072) != 0) {
            if (groupedId == null) throwNullFieldException("groupedId", flags);
            size += SIZE_INT64;
        }
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public long getRandomId() {
        return randomId;
    }

    public void setRandomId(long randomId) {
        this.randomId = randomId;
    }

    public int getTtl() {
        return ttl;
    }

    public void setTtl(int ttl) {
        this.ttl = ttl;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public TLAbsDecryptedMessageMedia getMedia() {
        return media;
    }

    public void setMedia(TLAbsDecryptedMessageMedia media) {
        this.media = media;
    }

    public TLVector<TLAbsMessageEntity> getEntities() {
        return entities;
    }

    public void setEntities(TLVector<TLAbsMessageEntity> entities) {
        this.entities = entities;
    }

    public String getViaBotName() {
        return viaBotName;
    }

    public void setViaBotName(String viaBotName) {
        this.viaBotName = viaBotName;
    }

    public Long getReplyToRandomId() {
        return replyToRandomId;
    }

    public void setReplyToRandomId(Long replyToRandomId) {
        this.replyToRandomId = replyToRandomId;
    }

    public Long getGroupedId() {
        return groupedId;
    }

    public void setGroupedId(Long groupedId) {
        this.groupedId = groupedId;
    }
}
