package io.objects.tl.api;

import static io.objects.tl.StreamUtils.*;
import static io.objects.tl.TLObjectUtils.*;

import io.objects.tl.TLContext;
import io.objects.tl.core.TLBytes;
import io.objects.tl.core.TLObject;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLDecryptedMessageLayer extends TLObject {
    public static final int CONSTRUCTOR_ID = 0x1be31789;

    protected TLBytes randomBytes;

    protected int layer;

    protected int inSeqNo;

    protected int outSeqNo;

    protected TLAbsDecryptedMessage message;

    private final String _constructor = "decryptedMessageLayer#1be31789";

    public TLDecryptedMessageLayer() {
    }

    public TLDecryptedMessageLayer(TLBytes randomBytes, int layer, int inSeqNo, int outSeqNo,
            TLAbsDecryptedMessage message) {
        this.randomBytes = randomBytes;
        this.layer = layer;
        this.inSeqNo = inSeqNo;
        this.outSeqNo = outSeqNo;
        this.message = message;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeTLBytes(randomBytes, stream);
        writeInt(layer, stream);
        writeInt(inSeqNo, stream);
        writeInt(outSeqNo, stream);
        writeTLObject(message, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        randomBytes = readTLBytes(stream, context);
        layer = readInt(stream);
        inSeqNo = readInt(stream);
        outSeqNo = readInt(stream);
        message = readTLObject(stream, context, TLAbsDecryptedMessage.class, -1);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += computeTLBytesSerializedSize(randomBytes);
        size += SIZE_INT32;
        size += SIZE_INT32;
        size += SIZE_INT32;
        size += message.computeSerializedSize();
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public TLBytes getRandomBytes() {
        return randomBytes;
    }

    public void setRandomBytes(TLBytes randomBytes) {
        this.randomBytes = randomBytes;
    }

    public int getLayer() {
        return layer;
    }

    public void setLayer(int layer) {
        this.layer = layer;
    }

    public int getInSeqNo() {
        return inSeqNo;
    }

    public void setInSeqNo(int inSeqNo) {
        this.inSeqNo = inSeqNo;
    }

    public int getOutSeqNo() {
        return outSeqNo;
    }

    public void setOutSeqNo(int outSeqNo) {
        this.outSeqNo = outSeqNo;
    }

    public TLAbsDecryptedMessage getMessage() {
        return message;
    }

    public void setMessage(TLAbsDecryptedMessage message) {
        this.message = message;
    }
}
