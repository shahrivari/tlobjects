package io.objects.tl.api;


import io.objects.tl.TLContext;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.objects.tl.StreamUtils.readDouble;
import static io.objects.tl.StreamUtils.writeDouble;
import static io.objects.tl.TLObjectUtils.SIZE_CONSTRUCTOR_ID;
import static io.objects.tl.TLObjectUtils.SIZE_DOUBLE;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLInputPhotoCrop extends TLAbsInputPhotoCrop {
    public static final int CONSTRUCTOR_ID = 0xd9915325;

    protected double crop_left;

    protected double crop_top;

    protected double crop_widths;

    private final String _constructor = "inputPhotoCrop#d9915325";

    public TLInputPhotoCrop() {
    }

    public TLInputPhotoCrop(double crop_left, double crop_top, double crop_widths) {
        this.crop_left = crop_left;
        this.crop_top = crop_top;
        this.crop_widths = crop_widths;
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        writeDouble(crop_left, stream);
        writeDouble(crop_top, stream);
        writeDouble(crop_widths, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        crop_left = readDouble(stream);
        crop_top = readDouble(stream);
        crop_widths = readDouble(stream);
    }

    @Override
    public int computeSerializedSize() {
        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_DOUBLE;
        size += SIZE_DOUBLE;
        size += SIZE_DOUBLE;
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }
}
