package io.tlobjects.tl.api;

import static io.tlobjects.tl.StreamUtils.*;
import static io.tlobjects.tl.TLObjectUtils.*;

import io.tlobjects.tl.TLContext;
import io.tlobjects.tl.core.TLObject;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;

/**
 * This class is generated by Mono's TL class generator
 */
public class TLChannelBannedRights extends TLObject {
    public static final int CONSTRUCTOR_ID = 0x58cf4249;

    protected int flags;

    protected boolean viewMessages;

    protected boolean sendMessages;

    protected boolean sendMedia;

    protected boolean sendStickers;

    protected boolean sendGifs;

    protected boolean sendGames;

    protected boolean sendInline;

    protected boolean embedLinks;

    protected int untilDate;

    private final String _constructor = "channelBannedRights#58cf4249";

    public TLChannelBannedRights() {
    }

    public TLChannelBannedRights(boolean viewMessages, boolean sendMessages, boolean sendMedia,
            boolean sendStickers, boolean sendGifs, boolean sendGames, boolean sendInline,
            boolean embedLinks, int untilDate) {
        this.viewMessages = viewMessages;
        this.sendMessages = sendMessages;
        this.sendMedia = sendMedia;
        this.sendStickers = sendStickers;
        this.sendGifs = sendGifs;
        this.sendGames = sendGames;
        this.sendInline = sendInline;
        this.embedLinks = embedLinks;
        this.untilDate = untilDate;
    }

    private void computeFlags() {
        flags = 0;
        flags = viewMessages ? (flags | 1) : (flags & ~1);
        flags = sendMessages ? (flags | 2) : (flags & ~2);
        flags = sendMedia ? (flags | 4) : (flags & ~4);
        flags = sendStickers ? (flags | 8) : (flags & ~8);
        flags = sendGifs ? (flags | 16) : (flags & ~16);
        flags = sendGames ? (flags | 32) : (flags & ~32);
        flags = sendInline ? (flags | 64) : (flags & ~64);
        flags = embedLinks ? (flags | 128) : (flags & ~128);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();

        writeInt(flags, stream);
        writeInt(untilDate, stream);
    }

    @Override
    @SuppressWarnings({"unchecked", "SimplifiableConditionalExpression"})
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        viewMessages = (flags & 1) != 0;
        sendMessages = (flags & 2) != 0;
        sendMedia = (flags & 4) != 0;
        sendStickers = (flags & 8) != 0;
        sendGifs = (flags & 16) != 0;
        sendGames = (flags & 32) != 0;
        sendInline = (flags & 64) != 0;
        embedLinks = (flags & 128) != 0;
        untilDate = readInt(stream);
    }

    @Override
    public int computeSerializedSize() {
        computeFlags();

        int size = SIZE_CONSTRUCTOR_ID;
        size += SIZE_INT32;
        size += SIZE_INT32;
        return size;
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    public boolean getViewMessages() {
        return viewMessages;
    }

    public void setViewMessages(boolean viewMessages) {
        this.viewMessages = viewMessages;
    }

    public boolean getSendMessages() {
        return sendMessages;
    }

    public void setSendMessages(boolean sendMessages) {
        this.sendMessages = sendMessages;
    }

    public boolean getSendMedia() {
        return sendMedia;
    }

    public void setSendMedia(boolean sendMedia) {
        this.sendMedia = sendMedia;
    }

    public boolean getSendStickers() {
        return sendStickers;
    }

    public void setSendStickers(boolean sendStickers) {
        this.sendStickers = sendStickers;
    }

    public boolean getSendGifs() {
        return sendGifs;
    }

    public void setSendGifs(boolean sendGifs) {
        this.sendGifs = sendGifs;
    }

    public boolean getSendGames() {
        return sendGames;
    }

    public void setSendGames(boolean sendGames) {
        this.sendGames = sendGames;
    }

    public boolean getSendInline() {
        return sendInline;
    }

    public void setSendInline(boolean sendInline) {
        this.sendInline = sendInline;
    }

    public boolean getEmbedLinks() {
        return embedLinks;
    }

    public void setEmbedLinks(boolean embedLinks) {
        this.embedLinks = embedLinks;
    }

    public int getUntilDate() {
        return untilDate;
    }

    public void setUntilDate(int untilDate) {
        this.untilDate = untilDate;
    }
}
