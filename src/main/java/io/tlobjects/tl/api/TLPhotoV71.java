package io.tlobjects.tl.api;

import io.tlobjects.tl.TLContext;
import io.tlobjects.tl.core.TLVector;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import static io.tlobjects.tl.StreamUtils.*;

/**
 * This class is generated by Alxan and Xanjar
 */
public class TLPhotoV71 extends TLAbsPhoto {
    public static final int CONSTRUCTOR_ID = 0x9288dd29;

    private final String _constructor = "photoV71#9288dd29";

    public int flags;
    public long accessHash;
    public int userId;
    public int date;
    public TLAbsGeoPoint geo;
    public TLVector<TLAbsPhotoSize> sizes;
    public boolean hasStickers;

    private void computeFlags() {
        flags = 0;
        flags = hasStickers ? (flags | 1) : (flags & ~1);
    }

    @Override
    public void serializeBody(OutputStream stream) throws IOException {
        computeFlags();
        writeInt(flags, stream);
        writeLong(id, stream);
        writeLong(accessHash, stream);
        writeInt(date, stream);
        writeTLVector(sizes, stream);
    }

    @Override
    public void deserializeBody(InputStream stream, TLContext context) throws IOException {
        flags = readInt(stream);
        hasStickers = (flags & 1) != 0;
        id = readLong(stream);
        accessHash = readLong(stream);
        date = readInt(stream);
        sizes = readTLVector(stream, context);
    }

    @Override
    public String toString() {
        return _constructor;
    }

    @Override
    public int getConstructorId() {
        return CONSTRUCTOR_ID;
    }

    @Override
    public final boolean isEmpty() {
        return false;
    }

    @Override
    public final boolean isNotEmpty() {
        return true;
    }

    public final TLPhotoV71 getAsPhotoV71() {
        return this;
    }
}
